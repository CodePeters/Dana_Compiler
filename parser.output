Terminals unused in grammar

   LOOP
   AS
   DECL
   DEF
   ADD
   MUL
   DIV
   SUB
   EQ
   DIFF
   LARGER
   SMALLER
   LARGEREQ
   SMALLEREQ
   COLON


Grammar

    0 $accept: body $end

    1 body: BEG stmt_list END

    2 stmt_list: stmt
    3          | stmt_list stmt

    4 lval: IDENTIFIER
    5     | STRINGLITERAL
    6     | lval '[' expression ']'

    7 type: INT '[' CONST ']'
    8     | BYTE '[' CONST ']'
    9     | INT
   10     | BYTE

   11 stmt: SKIP
   12     | mif
   13     | lval ASSIGNMENT expression
   14     | VAR lval IS type

   15 mif: IF expression BEG stmt_list END ELSE BEG stmt_list END

   16 expression: IDENTIFIER
   17           | STRINGLITERAL
   18           | CONST
   19           | '(' expression ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 19
')' (41) 19
'[' (91) 6 7 8
']' (93) 6 7 8
error (256)
IDENTIFIER (258) 4 16
INT (259) 7 9
BYTE (260) 8 10
IF (261) 15
ELSE (262) 15
STRINGLITERAL (263) 5 17
LOOP (264)
AS (265)
SKIP (266) 11
DECL (267)
DEF (268)
BEG (269) 1 15
END (270) 1 15
VAR (271) 14
IS (272) 14
ADD (273)
MUL (274)
DIV (275)
SUB (276)
EQ (277)
DIFF (278)
LARGER (279)
SMALLER (280)
LARGEREQ (281)
SMALLEREQ (282)
COLON (283)
ASSIGNMENT (284) 13
CONST (285) 7 8 18


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
body (36)
    on left: 1, on right: 0
stmt_list (37)
    on left: 2 3, on right: 1 3 15
lval (38)
    on left: 4 5 6, on right: 6 13 14
type (39)
    on left: 7 8 9 10, on right: 14
stmt (40)
    on left: 11 12 13 14, on right: 2 3
mif (41)
    on left: 15, on right: 12
expression (42)
    on left: 16 17 18 19, on right: 6 13 15 19


State 0

    0 $accept: . body $end

    BEG  shift, and go to state 1

    body  go to state 2


State 1

    1 body: BEG . stmt_list END

    IDENTIFIER     shift, and go to state 3
    IF             shift, and go to state 4
    STRINGLITERAL  shift, and go to state 5
    SKIP           shift, and go to state 6
    VAR            shift, and go to state 7

    stmt_list  go to state 8
    lval       go to state 9
    stmt       go to state 10
    mif        go to state 11


State 2

    0 $accept: body . $end

    $end  shift, and go to state 12


State 3

    4 lval: IDENTIFIER .

    $default  reduce using rule 4 (lval)


State 4

   15 mif: IF . expression BEG stmt_list END ELSE BEG stmt_list END

    IDENTIFIER     shift, and go to state 13
    STRINGLITERAL  shift, and go to state 14
    CONST          shift, and go to state 15
    '('            shift, and go to state 16

    expression  go to state 17


State 5

    5 lval: STRINGLITERAL .

    $default  reduce using rule 5 (lval)


State 6

   11 stmt: SKIP .

    $default  reduce using rule 11 (stmt)


State 7

   14 stmt: VAR . lval IS type

    IDENTIFIER     shift, and go to state 3
    STRINGLITERAL  shift, and go to state 5

    lval  go to state 18


State 8

    1 body: BEG stmt_list . END
    3 stmt_list: stmt_list . stmt

    IDENTIFIER     shift, and go to state 3
    IF             shift, and go to state 4
    STRINGLITERAL  shift, and go to state 5
    SKIP           shift, and go to state 6
    END            shift, and go to state 19
    VAR            shift, and go to state 7

    lval  go to state 9
    stmt  go to state 20
    mif   go to state 11


State 9

    6 lval: lval . '[' expression ']'
   13 stmt: lval . ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 21
    '['         shift, and go to state 22


State 10

    2 stmt_list: stmt .

    $default  reduce using rule 2 (stmt_list)


State 11

   12 stmt: mif .

    $default  reduce using rule 12 (stmt)


State 12

    0 $accept: body $end .

    $default  accept


State 13

   16 expression: IDENTIFIER .

    $default  reduce using rule 16 (expression)


State 14

   17 expression: STRINGLITERAL .

    $default  reduce using rule 17 (expression)


State 15

   18 expression: CONST .

    $default  reduce using rule 18 (expression)


State 16

   19 expression: '(' . expression ')'

    IDENTIFIER     shift, and go to state 13
    STRINGLITERAL  shift, and go to state 14
    CONST          shift, and go to state 15
    '('            shift, and go to state 16

    expression  go to state 23


State 17

   15 mif: IF expression . BEG stmt_list END ELSE BEG stmt_list END

    BEG  shift, and go to state 24


State 18

    6 lval: lval . '[' expression ']'
   14 stmt: VAR lval . IS type

    IS   shift, and go to state 25
    '['  shift, and go to state 22


State 19

    1 body: BEG stmt_list END .

    $default  reduce using rule 1 (body)


State 20

    3 stmt_list: stmt_list stmt .

    $default  reduce using rule 3 (stmt_list)


State 21

   13 stmt: lval ASSIGNMENT . expression

    IDENTIFIER     shift, and go to state 13
    STRINGLITERAL  shift, and go to state 14
    CONST          shift, and go to state 15
    '('            shift, and go to state 16

    expression  go to state 26


State 22

    6 lval: lval '[' . expression ']'

    IDENTIFIER     shift, and go to state 13
    STRINGLITERAL  shift, and go to state 14
    CONST          shift, and go to state 15
    '('            shift, and go to state 16

    expression  go to state 27


State 23

   19 expression: '(' expression . ')'

    ')'  shift, and go to state 28


State 24

   15 mif: IF expression BEG . stmt_list END ELSE BEG stmt_list END

    IDENTIFIER     shift, and go to state 3
    IF             shift, and go to state 4
    STRINGLITERAL  shift, and go to state 5
    SKIP           shift, and go to state 6
    VAR            shift, and go to state 7

    stmt_list  go to state 29
    lval       go to state 9
    stmt       go to state 10
    mif        go to state 11


State 25

   14 stmt: VAR lval IS . type

    INT   shift, and go to state 30
    BYTE  shift, and go to state 31

    type  go to state 32


State 26

   13 stmt: lval ASSIGNMENT expression .

    $default  reduce using rule 13 (stmt)


State 27

    6 lval: lval '[' expression . ']'

    ']'  shift, and go to state 33


State 28

   19 expression: '(' expression ')' .

    $default  reduce using rule 19 (expression)


State 29

    3 stmt_list: stmt_list . stmt
   15 mif: IF expression BEG stmt_list . END ELSE BEG stmt_list END

    IDENTIFIER     shift, and go to state 3
    IF             shift, and go to state 4
    STRINGLITERAL  shift, and go to state 5
    SKIP           shift, and go to state 6
    END            shift, and go to state 34
    VAR            shift, and go to state 7

    lval  go to state 9
    stmt  go to state 20
    mif   go to state 11


State 30

    7 type: INT . '[' CONST ']'
    9     | INT .

    '['  shift, and go to state 35

    $default  reduce using rule 9 (type)


State 31

    8 type: BYTE . '[' CONST ']'
   10     | BYTE .

    '['  shift, and go to state 36

    $default  reduce using rule 10 (type)


State 32

   14 stmt: VAR lval IS type .

    $default  reduce using rule 14 (stmt)


State 33

    6 lval: lval '[' expression ']' .

    $default  reduce using rule 6 (lval)


State 34

   15 mif: IF expression BEG stmt_list END . ELSE BEG stmt_list END

    ELSE  shift, and go to state 37


State 35

    7 type: INT '[' . CONST ']'

    CONST  shift, and go to state 38


State 36

    8 type: BYTE '[' . CONST ']'

    CONST  shift, and go to state 39


State 37

   15 mif: IF expression BEG stmt_list END ELSE . BEG stmt_list END

    BEG  shift, and go to state 40


State 38

    7 type: INT '[' CONST . ']'

    ']'  shift, and go to state 41


State 39

    8 type: BYTE '[' CONST . ']'

    ']'  shift, and go to state 42


State 40

   15 mif: IF expression BEG stmt_list END ELSE BEG . stmt_list END

    IDENTIFIER     shift, and go to state 3
    IF             shift, and go to state 4
    STRINGLITERAL  shift, and go to state 5
    SKIP           shift, and go to state 6
    VAR            shift, and go to state 7

    stmt_list  go to state 43
    lval       go to state 9
    stmt       go to state 10
    mif        go to state 11


State 41

    7 type: INT '[' CONST ']' .

    $default  reduce using rule 7 (type)


State 42

    8 type: BYTE '[' CONST ']' .

    $default  reduce using rule 8 (type)


State 43

    3 stmt_list: stmt_list . stmt
   15 mif: IF expression BEG stmt_list END ELSE BEG stmt_list . END

    IDENTIFIER     shift, and go to state 3
    IF             shift, and go to state 4
    STRINGLITERAL  shift, and go to state 5
    SKIP           shift, and go to state 6
    END            shift, and go to state 44
    VAR            shift, and go to state 7

    lval  go to state 9
    stmt  go to state 20
    mif   go to state 11


State 44

   15 mif: IF expression BEG stmt_list END ELSE BEG stmt_list END .

    $default  reduce using rule 15 (mif)
